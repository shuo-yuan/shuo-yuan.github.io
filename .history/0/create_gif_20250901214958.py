#!/usr/bin/env python3
"""
Script to create a recurring GIF from images in the media folder.

Note: This code is generated by AI. 
"""

from PIL import Image
import os
import glob

def create_recurring_gif():
    """Create a recurring GIF from all images in the media folder."""
    
    # Get all JPG images from the media folder
    media_path = "media"
    image_files = sorted(glob.glob(os.path.join(media_path, "*.jpg")))
    
    if not image_files:
        print("No JPG images found in the media folder!")
        return
    
    print(f"Found {len(image_files)} images:")
    for img_path in image_files:
        print(f"  - {os.path.basename(img_path)}")
    
    # Load all images and find the maximum dimensions
    images = []
    max_width = 0
    max_height = 0
    
    for img_path in image_files:
        try:
            img = Image.open(img_path)
            # Convert to RGB if necessary (in case of RGBA images)
            if img.mode != 'RGB':
                img = img.convert('RGB')
            
            # Track maximum dimensions
            max_width = max(max_width, img.size[0])
            max_height = max(max_height, img.size[1])
            
            images.append(img)
            print(f"Loaded: {os.path.basename(img_path)} ({img.size[0]}x{img.size[1]})")
        except Exception as e:
            print(f"Error loading {img_path}: {e}")
    
    if not images:
        print("No images could be loaded!")
        return
    
    print(f"\nMaximum dimensions found: {max_width}x{max_height}")
    
    # Create a new list with properly sized images
    processed_images = []
    for i, img in enumerate(images):
        # Create a new image with the maximum dimensions and white background
        new_img = Image.new('RGB', (max_width, max_height), (255, 255, 255))
        
        # Calculate centering position
        x_offset = (max_width - img.size[0]) // 2
        y_offset = (max_height - img.size[1]) // 2
        
        # Paste the original image centered on the white background
        new_img.paste(img, (x_offset, y_offset))
        processed_images.append(new_img)
        
        print(f"Processed image {i+1}: centered on {max_width}x{max_height} canvas")
    
    # Create the GIF
    output_path = os.path.join(media_path, "recurring_animation.gif")
    
    # Save as GIF with consistent timing and no optimization issues
    processed_images[0].save(
        output_path,
        save_all=True,
        append_images=processed_images[1:],
        duration=150,  # 100ms between frames (0.1 seconds) - consistent timing
        loop=0,        # 0 means loop forever
        optimize=False, # Disable optimization to prevent timing issues
        quality=100     # Maximum quality to prevent compression artifacts
    )
    
    print(f"\nGIF created successfully: {output_path}")
    print(f"Total frames: {len(processed_images)}")
    print(f"Frame duration: 100ms (0.1 seconds) - consistent timing")
    print(f"Loop: Infinite")
    print(f"Canvas size: {max_width}x{max_height}")
    print(f"Optimization: Disabled (prevents timing issues)")
    print(f"File size: {os.path.getsize(output_path) / (1024*1024):.2f} MB")

if __name__ == "__main__":
    create_recurring_gif() 